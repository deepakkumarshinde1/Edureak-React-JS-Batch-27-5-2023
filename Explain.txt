https://javascript.info/
https://www.w3schools.com/js/   
https://www.w3schools.com/w3css/defaulT.asp
https://www.w3schools.com/html/

HTML ==> Good 
    Basic of tag like heading , para , a list , table, forms
CSS ==> Good
    How design a page , color , background ,flex/grid/inline-block
Javascript ==> Good
    How run javascript code 
    Basic of JS 
        variables
        if.. else
        switch
        array i.e []
            push , splice , map , filter , find
        object i.e {}
            add data, delete , Object.keys , Object.values , Object.assign(), Object.entries()
        functions
        basic DOM (document object model)

Introduction to React JS
    React JS is library use for User Interaction (View) ==> 
        # Front End Development 
        # Mobile Development
        # Desktop Development

    (model => db ,  view UI,  controller => handling operations)

    SpringBoot ==> Java ==> MVC (model view controller)
    Laravel ==> PHP ==> MVC
    Django => Py ==> MVC
    .Net => C# ==> MVC
    ExpressJS => Javascript (MVC)
    Angular ==> Javascript (MVVM)


Work with react ==> need Node JS
    Run a js code without a browser ==> Node JS (V8 Engine)
   
    Development react application
        ==> development server (only run node js)
        ==> development server will server our code on browser

    NMP ==> Node package manager
        ==> packages (lib , framework , small code)
        ==> set of commands ( install , uninstalling , updating )
        ==> install ==> npm i redux , npm install redux
        ==> uninstalling ==> npm un redux , npm uninstall redux
        ==> update ==> npm update redux
        ==> run a project ==> npm start
        ==> test ==> npm run test
        ==> build => npm run build

    ==> React / Node JS 
        ==> project configuration package.json
        ==> npm init ==> package.json

    ==> How to react application ?
        # npx create-react-app app-name
        # zero configuration , you can start 

        # npx  vs npm
        # npm ==> manage (install , uninstall , update)
        # npx => node package executor
        # npx ==> runtime ( install create-react-app, create our-project ,react create-react-app )

# steps install react
    # install node js
    # create folder 
    # open command prompt in that folder
    # don't create a folder like node , npm ,node programming, npm programming
    # npx create-react-app app-name
---------------------------------------------
    
// Read bellow links
https://medium.com/swlh/a-quick-introduction-to-jsx-ce57ce1b3343
https://medium.com/the-andela-way/understanding-react-components-37f841c1f3bb
https://medium.com/swlh/class-based-components-in-react-440eb8ed85a0
https://medium.com/@itIsMadhavan/reactjs-props-vs-state-ff3a7680930d

Public
    index.html
    images
Src
    .js / .jsx
    .css
        image
        fonts
    .test.js
package.json

SRC
    main entry ==> index.js
    components ===> App.js
        basic building block of react application
        reusable in nature
            class component (legacy project)
            functional component (new project)

component ==>start capital letter

jsx ==> Javascript XML 
    ==> jsx must have only one parent
    ==> parent can be any html element or <></> (JSX fragment)

    ==> external css ==> className="red remove-text"
    ==> inline css  ==>style={{ key:value}}
    ==> {} ==> write a js code (jsx expression)

Event 
    ==> user interaction
    ==> onClick , onChange , onKeyPress , onKeyUp

How to handel data inside component ?
    # state are use to handel the data inside.
    # when we update state component re-render
    # functional component ==> don't state
    # to work with functional state ==> hooks
    # hook are predefine methods in react 
    # hooks can perform a complex operations
    # every hook start with "use"
    # for state we have a hook called "useState()"
    # hooks can only work in functional component
    # in useState(value) ==> value can be :: number, string , boolean , [] , {}

# react life cycle methods

# product-store
    add data
    product-view
    delete-product
    edit-product

    3rd party product api

npx create-react-app app-name
npx => node package executor ==> download ==> run package ==> uninstall
npm => node package manager
        ==> install a package (single / multiple package) npm i <package_name>
        ==> config project npm init -y
        ==> uninstall a package (single / multiple package) npm un <package_name>
        ==> update a package (single / multiple package) npm update <package_name>
        ==> npm start
        ==> npm run build
        ==> npm run test

// if you delete node_module folder install package
    => npm i

// cd <folder_name> 


# typography
# colors
# buttons
# list
# gird
# flex

# change app class= to className=
# change for= to htmlFor=
# close all element like img, input with "/>"

parent 
    container-fluid

        row
            col-12

# react-router-dom
    # component
        # Browser Router ==> add/enable routing to app
        # Routes
        # Route
        # outlet
        # Navigation
        # Link
        # NavLIst
    # hooks methods
        useParams
        useNavigate ==> navigate my using javascript


next week
    redux
    redux-saga
    redux-toolkit
    useSelector
    useDispatch()

    hooks ==> advance hooks in react

# saga works with generator function 
# generator function are available  in javascript
# with the gen function we pause and resume the function flow

# saga methods
    call ==> run a api
    put ==> like dispatch , its call the action of redux
    takeEvery ==> when we calls same api multiple time , its will run all request
    takeLatest ==>  when we calls same api multiple time , its will only run recent request and cancel older one
    all ==> run different api same time 

    /get-data
    /get-data
    /get-data